# -*- coding: utf-8 -*-
"""dashboard.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iSElUog-B3rHIPmhvpJfdRst8QpIwmBS
"""

!pip install streamlit

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import streamlit as st
import datetime
from pathlib import Path

def create_yr(df):
    year_day = df.groupby(by="yr").instant.nunique().reset_index()
    year_day.rename(columns={
        "instant": "sum"
    }, inplace=True)

    return year_day

def create_holiday(df):
    holidyday = df.groupby(by="holiday").instant.nunique().reset_index()
    holidyday.rename(columns={
        "instant": "sum"
    }, inplace=True)

    return holidyday

def create_workingday(df):
    workingday = df.groupby(by="workingday").instant.nunique().reset_index()
    workingday.rename(columns={
        "instant": "sum"
    }, inplace=True)

    return workingday

def sidebar(df):
    df["dteday"] = pd.to_datetime(df["dteday"])
    min_date = df["dteday"].min()
    max_date = df["dteday"].max()

    with st.sidebar:
        st.image("bike-share.png")

        def on_change():
            st.session_state.date = date

        date = st.date_input(
            label="Rentang Waktu",
            min_value=min_date,
            max_value=max_date,
            value=[min_date, max_date],
            on_change=on_change
        )

    return date

def year(df):
    st.subheader("Year")

    fig, ax = plt.subplots(figsize=(20, 10))
    sns.barplot(
        x="yr",
        y="sum",
        data=df.sort_values(by="yr", ascending=False),
        ax=ax
    )
    ax.set_title("Bike Sharing by Year", loc="center", fontsize=30)
    ax.set_ylabel(None)
    ax.set_xlabel(None)
    ax.tick_params(axis="y", labelsize=20)
    ax.tick_params(axis="x", labelsize=15)
    st.pyplot(fig)

def month(df):
    st.subheader("Month")

    fig, ax = plt.subplots(figsize=(20, 10))
    sns.barplot(
        x="mnth",
        y="cnt",
        data=df.sort_values(by="mnth", ascending=False),
        ax=ax
    )
    ax.set_title("Bike Sharing by Month", loc="center", fontsize=30)
    ax.set_ylabel(None)
    ax.set_xlabel(None)
    ax.tick_params(axis="x", labelsize=15)
    st.pyplot(fig)

def holiday(df):
    st.subheader("Holiday")

    fig, ax = plt.subplots(figsize=(20, 10))
    sns.barplot(
        x="holiday",
        y="sum",
        data=df.sort_values(by="holiday", ascending=False),
        ax=ax
    )
    ax.set_title("Bike Sharing by Holiday", loc="center", fontsize=30)
    ax.set_ylabel(None)
    ax.set_xlabel(None)
    ax.tick_params(axis="y", labelsize=20)
    ax.tick_params(axis="x", labelsize=15)
    st.pyplot(fig)

def workingday(df):
    st.subheader("Working Day")

    fig, ax = plt.subplots(figsize=(20, 10))
    sns.barplot(
        x="workingday",
        y="sum",
        data=df.sort_values(by="workingday", ascending=False),
        ax=ax
    )
    ax.set_title("Bike Sharing by Working Day", loc="center", fontsize=30)
    ax.set_ylabel(None)
    ax.set_xlabel(None)
    ax.tick_params(axis="y", labelsize=20)
    ax.tick_params(axis="x", labelsize=15)
    st.pyplot(fig)

if __name__ == "__main__":
    sns.set(style="dark")

    st.header("Bike Sharing Dashboard :bike:")

    day_csv = Path(__file__).parents[1] / 'dashboard/day_cleaning.csv'

    day = pd.read_csv(day_csv)

    date = sidebar(day)
    if(len(date) == 2):
        main_df = day[(day["dteday"] >= str(date[0])) & (day["dteday"] <= str(date[1]))]
    else:
        main_df = day[(day["dteday"] >= str(st.session_state.date[0])) & (day["dteday"] <= str(st.session_state.date[1]))]

    year = create_yr(main_df)
    year(year)
    month(main_df)
    holiday_df = create_holiday(main_df)
    holiday(holiday)
    workingday = create_workingday(main_df)
    workingday(workingday)

